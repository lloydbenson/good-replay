#!/usr/bin/env node

// Load modules

var Hoek = require('hoek');
var Fs = require('fs');
var Optimist = require('optimist');
//var Http = require('http');
var Nipple = require('nipple');
var Url = require('url');

// Declare internals

var internals = {};
internals.argv = Optimist.usage('Usage: $0 -l log.json -u url -n Concurrent Requests')
                    .demand(['l', 'u'])
                    .argv;

internals.getLog = function () {

    //var log = null;
    var log = [];
    var logPath = internals.argv.l[0] !== '/' ? process.cwd() + '/' + internals.argv.l : internals.argv.l;
    var logFile = Fs.readFileSync(logPath, 'utf8').split('\n');
    //log = JSON.parse('[' + logFile.toString().split('\n').join(',') + ']');
    //console.log(logFile);
    return logFile;
}

internals.parseUrls = function (options, entries) {
    
    internals.urls = [];
    //for (var i = 0, il = entries.length; i < il; ++i) {
    // need to figure out why last [] entry and strip
    for (var i = 0, il = entries.length; i < il-1; ++i) {
        //console.log(i);
        var url = Hoek.clone(options);
        var entry = JSON.parse(entries[i]);
        if (entry.event === 'request' && entry.method === 'get') {

            if (entry.path) {

                url.path = entry.path;
                url.query = entry.query;
                url.headers = {};

                if (entry.log) {
                    //console.log(entry.log); 
                    for (var ei = 0, eil = entry.log.length; ei < eil; ++ei) {

                        var log = entry.log[ei];
                        if (!log.tags) {

                            continue;
                        }

                        if (log.tags.indexOf('state') !== -1) {

                            url.headers.Cookie = log.data;
                        }
                        else if (log.tags.indexOf('received') !== -1) {

                            url.headers['User-Agent'] = log.data.agent;
                        }
                    }
                }

                internals.urls.push(url);
            }
        }
    }
};

//internals.handleResponse = function (response) {

//    response.once('data', function () { });

//    response.once('error', function () {

//        Hoek.abort('error for: ' + response.req.path);
//        response.destroy();
//    });

//    response.once('finish', function () {

//        internals.makeRequest();
//    });
//};


internals.makeRequest = function () {

    var url = internals.urls.pop();

    while (!url) {
        if (!internals.urls.length) {
            return;
        }

        url = internals.urls.pop();
    }

//    var req = Http.get(url, function (res) {

//        internals.handleResponse(res);
//    });
    var options = {
        rejectUnauthorized: false
    };
    Nipple.get(url, options, function (err, res, payload) {

        if (err) {

            console.log(err);
        }
// not sure this else is really required
        else {
//            console.log(res);

            internals.makeRequest();
        }
    });

//    req.once('error', function (err) {

//        console.log(err);
//        internals.makeRequest();
//    });

//    req.once('finish', function () {

//        internals.makeRequest();
//    });
};


internals.makeRequests = function () {

//    Http.globalAgent.maxSockets = internals.availableSockets;
    console.log('Total requests to make: ' + internals.urls.length);
    console.log('Making requests...');

    for (var i = 0, il = (internals.urls.length > internals.availableSockets ? internals.availableSockets : internals.urls.length); i < il; ++i) {

        internals.makeRequest();
    }
};


internals.start = function () {

    internals.availableSockets = internals.argv.n ? parseInt(internals.argv.n) : 10;
    var log = internals.getLog();
    internals.parseUrls(Url.parse(internals.argv.u), log);
    internals.makeRequests();
};

internals.start();
