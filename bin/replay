#!/usr/bin/env node

// Load modules
var Hoek = require('hoek');
var Fs = require('fs');
var Optimist = require('optimist');
var Nipple = require('nipple');
var Readline = require('readline');
var Url = require('url');

// Declare internals

var internals = {};
internals.argv = Optimist.usage('Usage: $0 -l log.json -u url')
                    .demand(['l', 'u'])
                    .argv;

internals.getLog = function () {

    var log = [];
    var logPath = internals.argv.l[0] !== '/' ? process.cwd() + '/' + internals.argv.l : internals.argv.l;
    var logStream = Fs.createReadStream(logPath, { encoding: 'utf8' });
    return logStream;
}

internals.parseUrls = function (options, logstream) {
    
    internals.urls = [];
    var readline = Readline.createInterface({
        input: logstream,
        output: process.stdout,
        terminal: false
    });
    var logcnt = 0;
    console.log('processing ' + internals.argv.l);
 
    readline.on('line', function(line) {

        var url = Hoek.clone(options);
        var entry = JSON.parse(line);
        if (entry.event === 'request' && entry.method === 'get') {

            if (entry.path) {

                url.path = entry.path;
                url.query = entry.query;
                url.headers = {};

                if (entry.log) {

                    for (var ei = 0, eil = entry.log.length; ei < eil; ++ei) {

                        var log = entry.log[ei];
                        if (!log.tags) {

                            continue;
                        }

                        if (log.tags.indexOf('state') !== -1) {

                            url.headers.Cookie = log.data;
                        }
                        else if (log.tags.indexOf('received') !== -1) {

                            url.headers['User-Agent'] = log.data.agent;
                        }
                    }
                }
                internals.makeRequest(url);
                logcnt++;
            }
        }
    });
    readline.on('close', function() {
        console.log('processed ' + logcnt + ' entries.');
    });
};

internals.makeRequest = function (url) {

    var options = {
        rejectUnauthorized: false
    };
    Nipple.get(url, options, function (err, res, payload) {

        if (err) {

            console.log(err);
        }
   });
};

internals.start = function () {

    var log = internals.getLog();
    internals.parseUrls(Url.parse(internals.argv.u), log);
};

internals.start();
